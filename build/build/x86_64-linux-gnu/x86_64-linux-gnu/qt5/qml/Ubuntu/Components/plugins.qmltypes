import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -notrelocatable Ubuntu.Components 0.1 ../../'

Module {
    Component {
        name: "InverseMouseAreaType"
        defaultProperty: "data"
        prototype: "QQuickMouseArea"
        exports: ["Ubuntu.Components/InverseMouseArea 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "sensingArea"; type: "QQuickItem"; isPointer: true }
        Property { name: "topmostItem"; type: "bool" }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "point"; type: "QPointF" }
        }
    }
    Component {
        name: "QQmlPropertyMap"
        prototype: "QObject"
        Signal {
            name: "valueChanged"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "keys"; type: "QStringList" }
    }
    Component {
        name: "QQuickClipboard"
        prototype: "QObject"
        exports: ["Ubuntu.Components/Clipboard 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "data"; type: "QQuickMimeData"; isReadonly: true; isPointer: true }
        Method {
            name: "push"
            Parameter { name: "data"; type: "QVariant" }
        }
        Method { name: "clear" }
        Method { name: "newData"; type: "QQuickMimeData*" }
    }
    Component {
        name: "QQuickMimeData"
        prototype: "QObject"
        exports: ["Ubuntu.Components/MimeData 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "formats"; type: "QStringList"; isReadonly: true }
        Property { name: "text"; type: "string" }
        Property { name: "html"; type: "string" }
        Property { name: "urls"; type: "QList<QUrl>" }
        Property { name: "color"; type: "QColor" }
        Property { name: "data"; type: "QVariant" }
        Signal { name: "typeChanged" }
    }
    Component {
        name: "ShapeItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Ubuntu.Components/Shape 0.1"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "HAlignment"
            values: {
                "AlignLeft": 0,
                "AlignHCenter": 1,
                "AlignRight": 2
            }
        }
        Enum {
            name: "VAlignment"
            values: {
                "AlignTop": 0,
                "AlignVCenter": 1,
                "AlignBottom": 2
            }
        }
        Property { name: "color"; type: "QColor" }
        Property { name: "gradientColor"; type: "QColor" }
        Property { name: "radius"; type: "string" }
        Property { name: "image"; type: "QVariant" }
        Property { name: "stretched"; type: "bool" }
        Property { name: "horizontalAlignment"; type: "HAlignment" }
        Property { name: "verticalAlignment"; type: "VAlignment" }
        Property { name: "borderSource"; type: "string" }
        Signal { name: "borderChanged" }
        Method { name: "gridUnitChanged" }
    }
    Component {
        name: "UCAlarm"
        prototype: "QObject"
        exports: ["Ubuntu.Components/Alarm 0.1"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Ready": 1,
                "InProgress": 2,
                "Fail": 3
            }
        }
        Enum {
            name: "Operation"
            values: {
                "NoOperation": 0,
                "Saving": 1,
                "Canceling": 2,
                "Reseting": 3
            }
        }
        Enum {
            name: "Error"
            values: {
                "NoError": 0,
                "InvalidDate": 1,
                "EarlyDate": 2,
                "NoDaysOfWeek": 3,
                "OneTimeOnMoreDays": 4,
                "InvalidEvent": 5,
                "OperationPending": 6,
                "AdaptationError": 100
            }
        }
        Enum {
            name: "AlarmType"
            values: {
                "OneTime": 0,
                "Repeating": 1
            }
        }
        Enum {
            name: "DayOfWeek"
            values: {
                "Monday": 1,
                "Tuesday": 2,
                "Wednesday": 4,
                "Thursday": 8,
                "Friday": 16,
                "Saturday": 32,
                "Sunday": 64,
                "Daily": 127,
                "AutoDetect": 128
            }
        }
        Enum {
            name: "DaysOfWeek"
            values: {
                "Monday": 1,
                "Tuesday": 2,
                "Wednesday": 4,
                "Thursday": 8,
                "Friday": 16,
                "Saturday": 32,
                "Sunday": 64,
                "Daily": 127,
                "AutoDetect": 128
            }
        }
        Property { name: "enabled"; type: "bool" }
        Property { name: "message"; type: "string" }
        Property { name: "date"; type: "QDateTime" }
        Property { name: "type"; type: "AlarmType" }
        Property { name: "daysOfWeek"; type: "DaysOfWeek" }
        Property { name: "sound"; type: "QUrl" }
        Property { name: "error"; type: "int"; isReadonly: true }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Signal {
            name: "statusChanged"
            Parameter { name: "operation"; type: "Operation" }
        }
        Method { name: "save" }
        Method { name: "cancel" }
        Method { name: "reset" }
    }
    Component {
        name: "UCAlarmModel"
        prototype: "QAbstractListModel"
        exports: ["Ubuntu.Components/AlarmModel 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "get"
            type: "UCAlarm*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "UCArgument"
        prototype: "QObject"
        exports: ["Ubuntu.Components/Argument 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string" }
        Property { name: "help"; type: "string" }
        Property { name: "required"; type: "bool" }
        Property { name: "valueNames"; type: "QStringList" }
        Method {
            name: "at"
            type: "QVariant"
            Parameter { name: "i"; type: "int" }
        }
    }
    Component {
        name: "UCArguments"
        defaultProperty: "arguments"
        prototype: "QObject"
        exports: ["Ubuntu.Components/Arguments 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "defaultArgument"; type: "UCArgument"; isPointer: true }
        Property { name: "arguments"; type: "UCArgument"; isList: true; isReadonly: true }
        Property { name: "values"; type: "QQmlPropertyMap"; isReadonly: true; isPointer: true }
        Property { name: "error"; type: "bool"; isReadonly: true }
        Property { name: "errorMessage"; type: "string"; isReadonly: true }
        Method { name: "printUsage" }
        Method {
            name: "quitWithError"
            Parameter { name: "errorMessage"; type: "string" }
        }
        Method { name: "quitWithError" }
    }
    Component {
        name: "UCInverseMouse"
        prototype: "UCMouse"
        exports: ["Ubuntu.Components/InverseMouse 0.1"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "UCMouse"
        prototype: "QObject"
        exports: ["Ubuntu.Components/Mouse 0.1"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Priority"
            values: {
                "BeforeItem": 0,
                "AfterItem": 1
            }
        }
        Property { name: "enabled"; type: "bool" }
        Property { name: "acceptedButtons"; type: "Qt::MouseButtons"; isReadonly: true }
        Property { name: "hoverEnabled"; type: "bool"; isReadonly: true }
        Property { name: "clickAndHoldThreshold"; type: "int" }
        Property { name: "forwardTo"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "priority"; type: "Priority" }
        Signal {
            name: "pressed"
            Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal {
            name: "released"
            Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal {
            name: "clicked"
            Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal {
            name: "pressAndHold"
            Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal {
            name: "doubleClicked"
            Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal {
            name: "positionChanged"
            Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal {
            name: "entered"
            Parameter { name: "event"; type: "QQuickMouseEvent"; isPointer: true }
        }
        Signal {
            name: "exited"
            Parameter { name: "event"; type: "QQuickMouseEvent"; isPointer: true }
        }
    }
    Component {
        name: "UCQQuickImageExtension"
        defaultProperty: "data"
        prototype: "QQuickImageBase"
        exports: ["Ubuntu.Components/QQuickImageBase 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "QUrl" }
        Signal {
            name: "sourceChanged"
            Parameter { type: "QUrl" }
        }
        Signal {
            name: "sourceChanged"
            Parameter { type: "QUrl" }
        }
    }
    Component {
        name: "UCStateSaver"
        prototype: "QObject"
        exports: ["Ubuntu.Components/StateSaver 0.1"]
        exportMetaObjectRevisions: [0]
        attachedType: "UCStateSaverAttached"
    }
    Component {
        name: "UCStateSaverAttached"
        prototype: "QObject"
        Property { name: "enabled"; type: "bool" }
        Property { name: "properties"; type: "string" }
    }
    Component {
        name: "UCUbuntuAnimation"
        prototype: "QObject"
        exports: ["Ubuntu.Components/UbuntuAnimation 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "SnapDuration"; type: "int"; isReadonly: true }
        Property { name: "FastDuration"; type: "int"; isReadonly: true }
        Property { name: "BriskDuration"; type: "int"; isReadonly: true }
        Property { name: "SlowDuration"; type: "int"; isReadonly: true }
        Property { name: "SleepyDuration"; type: "int"; isReadonly: true }
        Property { name: "StandardEasing"; type: "QEasingCurve"; isReadonly: true }
        Property { name: "StandardEasingReverse"; type: "QEasingCurve"; isReadonly: true }
    }
    Component {
        name: "UCUnits"
        prototype: "QObject"
        exports: ["Ubuntu.Components/UCUnits 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "gridUnit"; type: "float" }
        Method {
            name: "dp"
            type: "float"
            Parameter { name: "value"; type: "float" }
        }
        Method {
            name: "gu"
            type: "float"
            Parameter { name: "value"; type: "float" }
        }
    }
    Component {
        name: "UCUriHandler"
        prototype: "QObject"
        exports: ["Ubuntu.Components/UriHandler 0.1"]
        exportMetaObjectRevisions: [0]
        Signal {
            name: "opened"
            Parameter { name: "uris"; type: "QStringList" }
        }
    }
    Component {
        name: "UbuntuI18n"
        prototype: "QObject"
        exports: ["Ubuntu.Components/i18n 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "domain"; type: "string" }
        Property { name: "language"; type: "string" }
        Method {
            name: "bindtextdomain"
            Parameter { name: "domain_name"; type: "string" }
            Parameter { name: "dir_name"; type: "string" }
        }
        Method {
            name: "tr"
            type: "string"
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "tr"
            type: "string"
            Parameter { name: "singular"; type: "string" }
            Parameter { name: "plural"; type: "string" }
            Parameter { name: "n"; type: "int" }
        }
        Method {
            name: "dtr"
            type: "string"
            Parameter { name: "domain"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "dtr"
            type: "string"
            Parameter { name: "domain"; type: "string" }
            Parameter { name: "singular"; type: "string" }
            Parameter { name: "plural"; type: "string" }
            Parameter { name: "n"; type: "int" }
        }
    }
}
